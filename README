efloat: Embedable Float manipulation library

The goal of this library is to provide functions which can be added
to embedded projects, especially those which wish to transfer
floating point data without paying the cost of string conversion.
Not all platforms have 32 and 64 bit floats, thus the library tries
to be resilient to this. For example all of "float", "double" and
"long double" types on the "avr" platform are 32 bits, there is no
"float64" when building for avr, only "float32".

Assuming IEEE 754 (radix 2), transforming the exponent is a bit tricky, but
the bit layout is straight-forward:

float32 Sign	Exponent	Significand (mantissa)
float32 1 [31]	8 [30-23]	23 [22-00]
float32 SEEEEEEE EMMMMMMM MMMMMMMM MMMMMMMM
https://en.wikipedia.org/wiki/Single-precision_floating-point_format

float64 Sign	Exponent	Significand (mantissa)
float64 1 [63]	11 [62-52]	52 [51-00]
float64 SEEEEEEE EEEEMMMM MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM MMMMMMMM
https://en.wikipedia.org/wiki/Double-precision_floating-point_format


Overview
--------

Before including efloat.h, ensure that stdint.h compatible typedefs
for fixed width integers have been declared, and the following
float.h vales are defined:

 * FLT_RADIX (at this time only FLT_RADIX == 2 is supported)
 * FLT_MAX_EXP
 * FLT_MANT_DIG
 * DBL_MAX_EXP
 * DBL_MANT_DIG
 * LDBL_MAX_EXP
 * LDBL_MANT_DIG

#include <efloat.h>

 * If "float", "double", or "long double" are either 32 or 64 bits,
   the values "efloat_float", "efloat_double", and/or "efloat_long_double"
   will be #defined to be either 32 or 64.

 * Header attempts to typedef two types: "efloat32" and "efloat64", and
   will #define "efloat32_exists" and "efloat64_exists" accordingly.

 * If the "efloat32_exists" is defined, then also defined are:

	efloat32_radix		   2
	efloat32_mant_dig	  24
	efloat32_exp_inf_nan	 128
	efloat32_exp_max	 127
	efloat32_exp_min	-127
	efloat32_max		   3.40282e+38
	efloat32_min		   1.17549e-38

	nextafter32(x,y)
	nexttoward32(x,y)

* If the "efloat64_exists" is defined, then also defined are:

	efloat64_radix		    2
	efloat64_mant_dig	   53
	efloat64_exp_inf_nan	 1024
	efloat64_exp_max	 1023
	efloat64_exp_min	-1023
	efloat64_max		    1.79769e+308
	efloat64_min		    2.22507e-308

	nextafter64(x,y)
	nexttoward64(x,y)

 * For each of these types, the header will declare functions to convert
   between integer and floating point types, for easier (de)serialization:

	efloat64  int64_to_efloat64(int64_t i)
	efloat64 uint64_to_efloat64(uint64_t i)

	uint64_t efloat64_to_uint64(efloat64 f)
	int64_t  efloat64_to_int64(efloat64 f)

 * Because it is useful when comparing floats to know how close two values
   are to each other, distance functions are defined which report the
   number of representable floats between two values:

	uint32_t efloat32_distance(efloat32 x, efloat32 y);
	uint64_t efloat64_distance(efloat64 x, efloat64 y);

 * Additionally, an equivilent to the "fpclassify" function from math.h
   is provided:

	enum efloat_class {
		ef_nan =	0,
		ef_inf =	1,
		ef_zero =	2,
		ef_subnorm =	3,
		ef_normal =	4
	};
	enum efloat_class efloat64_classify(efloat64 f)

   The enum efloat_class values are mapped to the same values as math.h
   as was provided by glibc on linux.

 * Functions for extracting infromation from the float are provided:

	struct efloat32_fields {
		uint8_t sign;
		int16_t exponent;
		uint32_t significand;
	};

	enum efloat_class efloat32_radix_2_to_fields(efloat32 f,
	                              struct efloat32_fields *fields);

	efloat32 efloat32_radix_2_from_fields(struct efloat32_fields fields,
	                                     enum efloat_class *efloat32class);

 * There are #defines which allow for slightly easier platform independent code:

	double d = -123.0/0.5;

	#if (efloat_double == 64)
	uint64_t u = efloat64_to_uint64(d);
	#else
	uint32_t u = efloat32_to_uint32(d);
	#endif

	struct efloat_double_fields fields;
	efloat_double_to_fields(d, &fields);
	printf("%f as unsigned: %lu (sign: %d, exp: %d, mant: %lu)\n",
		d,
		(unsigned long)u,
		(int)fields.sign,
		(int)fields.exponent,
		(unsigned long)fields.significand);


Usage
-----

The "tests" directory contains examples which shows round trip conversion
between integer and floating point types, as well as comparing to the host
platform's math.h version of fpclassify.


Building
--------
The included Makefile shows an exaple; try "make check"


License
-------
This work is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later
version.

This work is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License (COPYING) along with this library; if not, see:

	https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt
